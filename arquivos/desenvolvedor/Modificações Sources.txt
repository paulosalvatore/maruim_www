Arquivo enums.h
	Linha 23
		enum BugReportType_t : uint8_t {
			BUG_CATEGORY_MAP = 0,
			BUG_CATEGORY_TYPO = 1,
			BUG_CATEGORY_TECHNICAL = 2,
			BUG_CATEGORY_OTHER = 3
		};
Arquivo game.cpp
	Linha 4844
		void Game::playerReportBug(uint32_t playerId, const std::string& message, const Position position, const std::string& showCategory)
		{
			Player* player = getPlayerByID(playerId);
			if (!player) {
				return;
			}
			Database* db = Database::getInstance();
			std::ostringstream query;
			uint64_t currentTime = OTSYS_TIME();
			query << "INSERT INTO `reports` (`conta`, `posicao_x`, `posicao_y`, `posicao_z`, `mensagem`, `categoria`, `data`) VALUES (" << player->getAccount() << ',' << position.getX() << ',' << position.getY() << ',' << position.getZ() << ',' << db->escapeString(message.c_str()) << ',' << db->escapeString(showCategory.c_str()) << ',' << currentTime << ')';
			db->executeQuery(query.str());

			player->sendTextMessage(MESSAGE_EVENT_DEFAULT, "Sua reportação foi registrada com sucesso.");
		}
Arquivo game.h
	Linha 318
		void playerReportBug(uint32_t playerId, const std::string& message, const Position position);
Arquivo protocolgame.cpp
	Linha 1060
		void ProtocolGame::parseBugReport(NetworkMessage& msg)
		{
			uint8_t category = msg.getByte();
			std::string message = msg.getString();

			Position position;
			if (category == BUG_CATEGORY_MAP) {
				position = msg.getPosition();
			} else {
				position = player->getPosition();
			}
			addGameTask(&Game::playerReportBug, player->getID(), message, position);
		}
	Linha 2440
		msg.addByte(0x01); // can report bugs?
Arquivo luascript.cpp
	Linha 2230
		registerMethod("Player", "createParty", LuaScriptInterface::luaPlayerCreateParty);
	Linha 2274
		registerMethod("Player", "closeModalId", LuaScriptInterface::luaPlayerCloseModalId);
	Linha 9088
		int LuaScriptInterface::luaPlayerCreateParty(lua_State* L)
		{
			// player:createParty(targetPlayer[, joinTargetPlayer = false])
			Player* player = getUserdata<Player>(L, 1);
			Player* targetPlayer = getUserdata<Player>(L, 2);
			if (!player || !targetPlayer) {
				lua_pushnil(L);
				return 1;
			}

			Party* partyPlayer = player->getParty();
			Party* partyInvitedPlayer = targetPlayer->getParty();

			if (!partyPlayer && !partyInvitedPlayer) {
				partyPlayer = new Party(player);
				partyPlayer->invitePlayer(*targetPlayer);
				bool joinTargetPlayer = getBoolean(L, 3, false);
				if (joinTargetPlayer) {
					partyPlayer->joinParty(*targetPlayer);
				}
				pushUserdata<Party>(L, partyPlayer);
				setMetatable(L, -1, "Party");
			}
			return 1;
		}
	Linha 9648
		int LuaScriptInterface::luaPlayerCloseModalId(lua_State* L)
		{
			// player:closeModalId(window)
			Player* player = getUserdata<Player>(L, 1);
			if (!player) {
				lua_pushnil(L);
				return 1;
			}

			uint32_t windowId = getNumber<uint32_t>(L, 2);
			if (windowId) {
				if (player->hasModalWindowOpen(windowId)) {
					player->onModalWindowHandled(windowId);
				}
				pushBoolean(L, true);
			} else {
				lua_pushnil(L);
			}
			return 1;
		}
Arquivo luascript.h
	Linha 936
		static int luaPlayerCreateParty(lua_State* L);
	Linha 980
		static int luaPlayerCloseModalId(lua_State* L);
Arquivo player.cpp
	Linha 3393
		if (weapon) {
			uint32_t delay;

			if (!weapon->interruptSwing() || canDoAction()) {
				result = weapon->useWeapon(this, tool, attackedCreature);
				delay = getAttackSpeed();
			} else {
				delay = getNextActionTime();
			}

			SchedulerTask* task = createSchedulerTask(delay, std::bind(&Game::checkCreatureAttack,
				&g_game, getID()));
			setNextActionTask(task);
		} else {
			result = Weapon::useFist(this, attackedCreature);
		}